Implementation outline:
We will maintain, for each thread, two objects:
1. A sequential object to maintain
2. a pointer to the Node of the last Operation performed on the sequential object
Obviously, we will no longer hold the pointer to "tail" Node.

The changes to the implementation shown in class are located mainly in the part that computed our response (slide 60 in "lecture06"). Instead of creating a new instance and computing all the Operations on it from tail, we use the thread's sequential object as a "cache" of all the Operations that were applied in the current thread. This means that after inserting an Operation to the Operations list, we use the pointer to the last operation as a a starting point (instead of last.next) and apply the operations on the thread's sequential object from there onwards, until we reach the operation we inserted. After each Operation is applied, we advance the pointer of the last operation.
By doing that, we've made the pointer to "tail" obsolete, and that's why we can remove it.
These modifications will allow the Java garbage collector to dispose of the Nodes that their Operation has been executed
on the thread's sequential object.